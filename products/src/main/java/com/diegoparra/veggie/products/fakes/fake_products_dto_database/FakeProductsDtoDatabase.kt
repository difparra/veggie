package com.diegoparra.veggie.products.fakes.fake_products_dto_database

import com.diegoparra.veggie.products.data.firebase.ProductDto
import com.diegoparra.veggie.products.data.firebase.TagDto
import com.diegoparra.veggie.products.data.firebase.VariationDto
import com.google.firebase.Timestamp
import java.util.*


/*
    ------------------------------------------------------------------------------------------------
            HELPER CLASSES
    ------------------------------------------------------------------------------------------------
 */


sealed class FakeTagDto(val tag: TagDto) {
    object Fruits : FakeTagDto(TagDto(id = "fruits", name = "Frutas"))
    object Vegetables : FakeTagDto(TagDto(id = "vegetables", name = "Verduras"))
    object Meats : FakeTagDto(TagDto(id = "meats", name = "Carnes"))
}

sealed class FakeDetailDto(val detail: String) {
    object Maduro: FakeDetailDto("Maduro")
    object Verde: FakeDetailDto("Verde")
}

sealed class FakeUnitDto(val packet: String, val weight: Int, val unit: String) {
    object Libra : FakeUnitDto("Libra", 500, "g")
    class Bandeja(weight: Int, unit: String = "g") : FakeUnitDto("Bandeja", weight, unit)
    class Canastilla(weightGr: Int) : FakeUnitDto("Canastilla", weightGr, "g")
    class Unidad(weightGr: Int) : FakeUnitDto("Unidad", weightGr, "g")
    object Atado : FakeUnitDto("Atado", -1, "g")
    class Otro(packet: String, weight: Int, unit: String = "g"): FakeUnitDto(packet, weight, unit)
}

sealed class FakeLabelDto(val str : String){
    object Recomendado : FakeLabelDto("Recomendado")
    object Popular : FakeLabelDto("Popular")
}


class ProductDtoBuilder {

    private lateinit var tagId: String
    private lateinit var name: String
    private lateinit var imageUrl: String
    private lateinit var mainVarId: String
    private val variations = mutableListOf<VariationDto>()

    private fun String.normalise() =
        lowercase()
            .replace('á','a').replace('à', 'a')
            .replace('é','e').replace('à', 'a')
            .replace('í','i').replace('à', 'a')
            .replace('ó','o').replace('à', 'a')
            .replace('ú','u').replace('à', 'a')
            .replace('ñ','n')
            .replace(" ", "")


    fun createProduct(tag: FakeTagDto, name: String, imageUrl: String,
                      varId: String = UUID.randomUUID().toString(),
                      unit: FakeUnitDto, price: Int, discount: Float = 0.0f,
                      stock: Boolean = true, maxOrder: Int = 10,
                      suggestedLabel: FakeLabelDto? = null, details: List<FakeDetailDto>? = null
    ) : ProductDtoBuilder {
        this.tagId = tag.tag.id
        this.name = name
        this.imageUrl = imageUrl
        addVariation(varId, unit, price, discount, stock, maxOrder, suggestedLabel, details)
        setMainVarId(varId)
        return this
    }

    fun setMainVarId(mainVarId: String) : ProductDtoBuilder {
        val variation = variations.find { it.varId == mainVarId }
        variation?.let {
            this@ProductDtoBuilder.mainVarId = mainVarId
        }
        return this
    }

    fun addVariation(varId: String = UUID.randomUUID().toString(), unit: FakeUnitDto, price: Int, discount: Float = 0.0f,
                     stock: Boolean = true, maxOrder: Int = 10, suggestedLabel: FakeLabelDto? = null, details: List<FakeDetailDto>? = null
    ) : ProductDtoBuilder {
        val variation = VariationDto(
            varId = varId,
            packet = unit.packet,
            weight = unit.weight,
            unit = unit.unit,
            price = price,
            discount = discount,
            stock = stock,
            maxOrder = maxOrder,
            label = suggestedLabel?.str,
            details = details?.map { it.detail }
        )
        variations.add(variation)
        return this
    }

    fun build() : ProductDto {
        return ProductDto(
            mainId = "",    //  Autogenerated
            tagId = tagId,
            mainVarId = mainVarId,
            name = name,
            imageUrl = imageUrl,
            updatedAt = Timestamp.now(),
            deleted = false,
            variations = variations
        )
    }
}
